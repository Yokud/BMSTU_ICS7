# Лабораторная работа: Сумма ряда

# Назначение программы: вычисление суммы ряда с точностью eps

# Описание переменных:
# x - аргумент, start - начальное значение суммы, eps - точность
# m - максимальное количество циклов, step - шаг, z - сумма ряда
# i - номер члена ряда, n - номер выводимого члена ряда
# s, plus, q, error - вспомогательные переменные

# Тестовый пример:
# При x = 1, eps = 1e-2, +1, m = 20
#
# Ряд сошёлся на  10  члене 
# Конечная сумма: 1.12312

x = float(input('Введите значение аргумента х(не более 1 по модулю): '))
if abs(x) > 1:
    print('Неверное значение аргумента!')
else:
    eps = float(input('Введите точность: '))
    s = input('Введите операцию увеличения(+/*) и величину шага(без пробела):'\
              +'\n')
    s = list(s)
    m = int(input('Введите максимальное количество циклов: '))
    plus = s.pop(0) == '+'
    step = int(''.join(s))

# Верхняя часть таблицы
    print('┌────────────────┬────────────────┐')
    print('│{:^16s}│{:^16s}│'.format('Количество', 'Текущая'))
    print('│{:^16s}│{:^16s}│'.format('просуммированных', 'сумма'))
    print('│{:^16s}│{:^16s}│'.format('членов ряда', ''))

# Основная часть таблицы
    q = -x
    i = 1
    z = x
    error = False
    n = 1
    while abs(q) >= eps:
        if i == m+1:
            error = True
            break
        
        if i == n:
            print('├────────────────┼────────────────┤')
            print('│{:^16d}│{:^16s}│'.format(i, '{:^7g}'.format(z)))
            if plus:
                n += step
            else:
                n *= step
        q *= -((2*i-1)**2*x*x)/(2*i*(2*i + 1))
        z += q
        i += 1
    if i == n and i <= m:
        print('├────────────────┼────────────────┤')
        print('│{:^16d}│{:^16s}│'.format(i, '{:^7g}'.format(z)))


# Нижняя часть таблицы   
    print('└────────────────┴────────────────┘')
    if error == True:
        print('Спустя', m, 'циклов ряд не сошёлся')
    else:
        print('Ряд сошёлся на ', i,\
              '-ом члене \nКонечная сумма: {:^7g}'.format(z), sep = '')
